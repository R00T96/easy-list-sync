// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://dldrwtyagumgpmjlniig.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRsZHJ3dHlhZ3VtZ3BtamxuaWlnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4NTk3MjIsImV4cCI6MjA3MDQzNTcyMn0._cNy3R4GXuYcw2X-Sw8dya0ZuGOOiN98hqgLKBdyZpE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Create a client instance that includes custom headers (e.g. x-list-id for PIN scoping)
// Use a singleton pattern to avoid multiple client instances
let headerClient: ReturnType<typeof createClient<Database>> | null = null;
let currentHeaders: string | null = null;

export const createSupabaseWithHeaders = (headers: Record<string, string>) => {
  const headersKey = JSON.stringify(headers);
  
  // Reuse existing client if headers haven't changed
  if (headerClient && currentHeaders === headersKey) {
    return headerClient;
  }
  
  // Create new client only when headers change
  headerClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      headers,
    },
  });
  
  currentHeaders = headersKey;
  return headerClient;
};